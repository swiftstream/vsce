{
  "name": "swiftstream",
  "displayName": "Swift Stream IDE",
  "description": "ðŸ”‹ Swift IDE with batteries included",
  "version": "1.10.5",
  "publisher": "swiftstream",
  "icon": "media/icon.png",
  "engines": {
    "vscode": "^1.94.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/swiftstream/IDE.git"
  },
  "categories": [
    "Programming Languages",
    "Visualization"
  ],
  "keywords": [
    "swift",
    "swifweb",
    "web",
    "webber",
    "swifdroid",
    "android",
    "server",
    "docker",
    "vapor",
    "hummingbird",
    "live",
    "preview"
  ],
  "activationEvents": [
    "onStartupFinished",
    "workspaceContains:Package.swift"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": [
          "/.vscode/embedded-stream.json"
        ],
        "url": "./schemas/embedded-stream.schema.json"
      }
    ],
    "configuration": {
      "title": "Swift Stream IDE",
      "properties": {
        "stream.loggingLevel": {
          "order": 1,
          "type": "string",
          "description": "Swift Stream general log level",
          "enum": [
            "Normal",
            "Detailed",
            "Verbose",
            "Unbearable"
          ],
          "default": "Detailed",
          "uniqueItems": true
        },
        "swift.showTopRunButton": {
          "order": 2,
          "type": "boolean",
          "default": true,
          "description": "Show Run button at the top right corner"
        },
        "swift.showTopFlashButton": {
          "order": 3,
          "type": "boolean",
          "default": true,
          "description": "Show Flash button at the top right corner (in embedded mode)"
        },
        "swift.showTopBuildButton": {
          "order": 4,
          "type": "boolean",
          "default": true,
          "description": "Show Build button at the top right corner"
        },
        "swift.debugBuildMode": {
          "order": 5,
          "type": "string",
          "enum": [
            "Standard (glibc)",
            "Static Linux (x86-musl)",
            "Static Linux (arm-musl)"
          ],
          "default": "Standard (glibc)",
          "uniqueItems": true
        },
        "swift.releaseBuildMode": {
          "order": 6,
          "type": "string",
          "enum": [
            "Standard (glibc)",
            "Static Linux (x86-musl)",
            "Static Linux (arm-musl)"
          ],
          "default": "Standard (glibc)",
          "uniqueItems": true
        },
        "swift.clearLogBeforeBuild": {
          "order": 7,
          "type": "boolean",
          "default": false,
          "description": "Clears the log before each build"
        },
        "swift.hotRebuild": {
          "order": 8,
          "type": "boolean",
          "default": true,
          "description": "Hot rebuild whenever any file saved"
        },
        "web.debugBuildMode": {
          "order": 9,
          "type": "string",
          "enum": [
            "Wasi",
            "Wasi Preview 1 (threads)"
          ],
          "default": "Wasi",
          "uniqueItems": true
        },
        "web.releaseBuildMode": {
          "order": 10,
          "type": "string",
          "enum": [
            "Wasi",
            "Wasi Preview 1 (threads)"
          ],
          "default": "Wasi",
          "uniqueItems": true
        },
        "web.hotReload": {
          "order": 11,
          "type": "boolean",
          "default": true,
          "description": "Hot reload in the browser whenever any file saved"
        },
        "web.debugGzip": {
          "order": 12,
          "type": "boolean",
          "default": true,
          "description": "Compress WASM files with Gzip during a debug build."
        },
        "web.debugBrotli": {
          "order": 13,
          "type": "boolean",
          "default": true,
          "description": "Compress WASM files with Brotli during a debug build."
        },
        "web.appTargetName": {
          "order": 14,
          "type": "string",
          "description": "Name of the app target in Package.swift",
          "default": "App"
        },
        "web.serviceWorkerTargetName": {
          "order": 15,
          "type": "string",
          "description": "Name of the service worker target in Package.swift",
          "default": "Service"
        },
        "web.webSourcesPath": {
          "order": 16,
          "type": "string",
          "description": "Relative path to folder with web source files and package.json",
          "default": "WebSources"
        },
        "xcode.trimEndOfLine": {
          "order": 17,
          "type": "boolean",
          "default": true,
          "description": "Automatically trim whitespaces at the end of the line when pressing Enter, just like in Xcode"
        },
        "menu.state": {
          "order": 18,
          "type": "object",
          "default": {},
          "description": "Expanded/Collapsed flags for menu items"
        }
      }
    },
    "commands": [
      {
        "command": "SwiftStreamRun",
        "title": "Swift Stream: Run"
      },
      {
        "command": "SwiftStreamStop",
        "title": "Swift Stream: Stop"
      },
      {
        "command": "SwiftStreamBuild",
        "title": "Swift Stream: Build"
      },
      {
        "command": "SwiftStreamTest",
        "title": "Swift Stream: Run All Tests"
      },
      {
        "command": "stopDebugging",
        "title": "Stop Debugging",
        "icon": {
          "dark": "assets/icons/debug-stop.svg",
          "light": "assets/icons/debug-stop.svg"
        }
      },
      {
        "command": "stopRunningDebug",
        "title": "Stop (Ctrl/Cmd+.)",
        "shortTitle": "Stop",
        "icon": {
          "dark": "assets/icons/stop.svg",
          "light": "assets/icons/stop.svg"
        }
      },
      {
        "command": "stopRunningRelease",
        "title": "Stop (Ctrl/Cmd+.)",
        "shortTitle": "Stop",
        "icon": {
          "dark": "assets/icons/stop.svg",
          "light": "assets/icons/stop.svg"
        }
      },
      {
        "command": "chooseTestTarget",
        "title": "Choose target",
        "icon": {
          "dark": "assets/icons/target-white.svg",
          "light": "assets/icons/target.svg"
        }
      },
      {
        "command": "stopBuildingDebug",
        "title": "Stop Building (Ctrl/Cmd+.)",
        "shortTitle": "Stop Building",
        "icon": "$(debug-stop)"
      },
      {
        "command": "BuildDebug",
        "title": "Build in Debug (Ctrl/Cmd+B)",
        "shortTitle": "Build in Debug",
        "icon": {
          "dark": "assets/icons/hammer.svg",
          "light": "assets/icons/hammer.svg"
        }
      },
      {
        "command": "BuildFirmware",
        "title": "Build the firmware (Ctrl/Cmd+B)",
        "shortTitle": "Build the firmware",
        "icon": {
          "dark": "assets/icons/hammer.svg",
          "light": "assets/icons/hammer.svg"
        }
      },
      {
        "command": "runDebugAttached",
        "title": "Run and attach Debugger (Ctrl/Cmd+R)",
        "icon": {
          "dark": "assets/icons/bug-white.svg",
          "light": "assets/icons/bug.svg"
        }
      },
      {
        "command": "runDebugAttachedTopBar",
        "title": "Run and attach Debugger (Ctrl/Cmd+R)",
        "icon": {
          "dark": "assets/icons/run.svg",
          "light": "assets/icons/run.svg"
        }
      },
      {
        "command": "FlashFirmware",
        "title": "Flash the firmware (Ctrl/Cmd+R)",
        "icon": "$(symbol-event)"
      },
      {
        "command": "stopBuildingRelease",
        "title": "Stop Building (Ctrl/Cmd+.)",
        "shortTitle": "Stop Building",
        "icon": "$(debug-stop)"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "group": "navigation@0",
          "command": "runDebugAttachedTopBar",
          "when": "isNavigationRunButtonEnabled && !isDebugging"
        },
        {
          "group": "navigation@0",
          "command": "FlashFirmware",
          "when": "isNavigationFlashButtonEnabled"
        },
        {
          "group": "navigation@0",
          "command": "stopDebugging",
          "when": "isNavigationRunButtonEnabled && isDebugging"
        },
        {
          "group": "navigation@1",
          "command": "BuildDebug",
          "when": "isNavigationBuildButtonEnabled && !isEmbeddedStream && !isBuildingDebug"
        },
        {
          "group": "navigation@1",
          "command": "BuildFirmware",
          "when": "isNavigationBuildButtonEnabled && isEmbeddedStream && !isBuildingDebug"
        },
        {
          "group": "navigation@1",
          "command": "stopBuildingDebug",
          "when": "isNavigationBuildButtonEnabled && isBuildingDebug"
        }
      ],
      "view/item/context": [
        {
          "group": "inline",
          "command": "chooseTestTarget",
          "when": "view == swiftstreamSidebar && viewItem == Test && hasCachedTargets && !isBuildingDebug"
        },
        {
          "group": "inline",
          "command": "runDebugAttached",
          "when": "view == swiftstreamSidebar && viewItem == RunDebug && !isDebugging"
        },
        {
          "group": "inline",
          "command": "stopDebugging",
          "when": "view == swiftstreamSidebar && viewItem == RunDebug && isRunningDebugTarget && isDebugging"
        },
        {
          "group": "inline",
          "command": "stopRunningDebug",
          "when": "view == swiftstreamSidebar && viewItem == RunDebug && isRunningDebugTarget && !isDebugging"
        },
        {
          "group": "inline",
          "command": "stopBuildingDebug",
          "when": "view == swiftstreamSidebar && viewItem == BuildDebug && isBuildingDebug"
        },
        {
          "group": "inline",
          "command": "stopBuildingRelease",
          "when": "view == swiftstreamSidebar && viewItem == BuildRelease && isBuildingRelease"
        },
        {
          "group": "inline",
          "command": "stopRunningRelease",
          "when": "view == swiftstreamSidebar && viewItem == RunRelease && isRunningReleaseTarget"
        }
      ]
    },
    "keybindings": [
      {
        "key": "cmd+r",
        "command": "-workbench.action.debug.start"
      },
      {
        "key": "cmd+u",
        "command": "-cursorUndo"
      },
      {
        "command": "SwiftStreamRun",
        "win": "ctrl+r",
        "linux": "ctrl+r",
        "mac": "cmd+r",
        "when": "true"
      },
      {
        "command": "SwiftStreamStop",
        "win": "ctrl+.",
        "linux": "ctrl+.",
        "mac": "cmd+.",
        "when": "true"
      },
      {
        "command": "SwiftStreamBuild",
        "win": "ctrl+b",
        "linux": "ctrl+b",
        "mac": "cmd+b",
        "when": "true"
      },
      {
        "command": "SwiftStreamTest",
        "win": "ctrl+u",
        "linux": "ctrl+u",
        "mac": "cmd+u",
        "when": "true"
      }
    ],
    "views": {
      "explorer": [],
      "swiftstream-sidebar": [
        {
          "id": "swiftstreamSidebar",
          "name": "",
          "icon": "media/dep.svg",
          "contextualTitle": "Swift Stream Actions"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "swiftstream-sidebar",
          "title": "Swift Stream",
          "icon": "media/VSCodeIcon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "explorer",
        "contents": "You can also create a new Swift project in container.\n[Create Swift Project in Container](command:startNewProjectWizard)",
        "when": "swiftstream.state == NoProjectFolder && !isSwiftlangInstalled"
      },
      {
        "view": "explorer",
        "contents": "Swift Stream helps you to start Swift project in container.\n[Create Swift Project in Container](command:startNewProjectWizard)",
        "when": "swiftstream.state == NoProjectFolder && isSwiftlangInstalled"
      },
      {
        "view": "swiftstreamSidebar",
        "contents": "[Create Swift Project](command:startNewProjectWizard)",
        "when": "swiftstream.state == EmptyProjectFolder"
      },
      {
        "view": "swiftstreamSidebar",
        "contents": "Ready to create a project?\n[Start New Project](command:startNewProjectWizard)\n[Open project](command:openProject)",
        "when": "swiftstream.state == NoProjectFolder"
      },
      {
        "view": "swiftstreamSidebar",
        "contents": "Your `devcontainer.json` has an invalid configuration.\nWould you like to replace it with a valid one?\n[Fix configuration](command:fixWrongProjectConfiguration)\nDon't worry, existing configuration will be backed up.",
        "when": "swiftstream.state == WrongProjectConfiguration"
      },
      {
        "view": "swiftstreamSidebar",
        "contents": "Additional setup is required to activate the extension for this project\n[Setup](command:setupAlienProject)",
        "when": "swiftstream.state == MissingProjectConfiguration"
      },
      {
        "view": "swiftstreamSidebar",
        "contents": "`Package.swift` is required to activate the extension\n[Initialize project](command:initializeProjectInCurrentFolder)",
        "when": "swiftstream.state == MissingSwiftPackage"
      }
    ],
    "taskDefinitions": [
      {
        "type": "crawlserver",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "carwlserver"
          }
        }
      },
      {
        "type": "nginx",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "nginx"
          }
        }
      },
      {
        "type": "ngrok",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "ngrok"
          }
        }
      },
      {
        "type": "swift",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "swift"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out --skipLibCheck",
    "watch-tests": "tsc -p . -w --outDir out --skipLibCheck",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@iarna/toml": "^2.2.5",
    "@types/js-yaml": "^4.0.9",
    "@types/jsdom": "^21.1.7",
    "@types/mocha": "^10.0.7",
    "@types/node": "20.x",
    "@types/vscode": "^1.92.0",
    "@types/ws": "^8.5.12",
    "@typescript-eslint/eslint-plugin": "^7.14.1",
    "@typescript-eslint/parser": "^7.11.0",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.0",
    "@wasmer/wasm-transformer": "^0.12.0",
    "eslint": "^8.57.0",
    "handlebars": "^4.7.8",
    "immutable": "^5.0.3",
    "js-yaml": "^4.1.0",
    "jsdom": "^25.0.1",
    "json5": "^2.2.3",
    "sass": "^1.79.3",
    "ssh2-sftp-client": "^12.0.0",
    "ts-loader": "^9.5.1",
    "typescript": "^5.4.5",
    "webpack": ">=5.94.0",
    "webpack-cli": "^5.1.4",
    "ws": "^8.18.0"
  }
}
